
bluetooth_module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000060  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000232  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000188  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001be  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000098  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018a  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000091  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000040  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "macro.h"


int main(void)
{
	CLEAR_BIT(DDRA,3);
  6c:	d3 98       	cbi	0x1a, 3	; 26
	CLEAR_BIT(PORTA,3);
  6e:	db 98       	cbi	0x1b, 3	; 27
   Uart_init();
  70:	0e 94 44 00 	call	0x88	; 0x88 <Uart_init>
    {
	
		
		
		
			char c= Uart_Read();
  74:	0e 94 4b 00 	call	0x96	; 0x96 <Uart_Read>
			
			if(c == '1'){
  78:	81 33       	cpi	r24, 0x31	; 49
  7a:	11 f4       	brne	.+4      	; 0x80 <main+0x14>
				
				SET_BIT(PORTA,3);
  7c:	db 9a       	sbi	0x1b, 3	; 27
  7e:	fa cf       	rjmp	.-12     	; 0x74 <main+0x8>
			}
			
			if(c == '0'){
  80:	80 33       	cpi	r24, 0x30	; 48
  82:	c1 f7       	brne	.-16     	; 0x74 <main+0x8>
				
				CLEAR_BIT(PORTA,3);
  84:	db 98       	cbi	0x1b, 3	; 27
  86:	f6 cf       	rjmp	.-20     	; 0x74 <main+0x8>

00000088 <Uart_init>:
 */ 
#include "uart.h"

void Uart_init(){
	// baud rate
	UBRRL = 51;// baud rate 9600, F_CPU = 8Mhz
  88:	83 e3       	ldi	r24, 0x33	; 51
  8a:	89 b9       	out	0x09, r24	; 9

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN) | (1<<TXEN);
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)| (1<<UCSZ1)|(1<<UCSZ0);
  90:	86 e8       	ldi	r24, 0x86	; 134
  92:	80 bd       	out	0x20, r24	; 32
  94:	08 95       	ret

00000096 <Uart_Read>:
	for(uint8_t i = 0; data[i] != '\0'; i++)
	Uart_Write(data[i]);
}

uint8_t Uart_Read(){
	while ( !(UCSRA & (1<<RXC)) );
  96:	5f 9b       	sbis	0x0b, 7	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <Uart_Read>
	return UDR;
  9a:	8c b1       	in	r24, 0x0c	; 12
}
  9c:	08 95       	ret

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
